---
product_name: MyProduct
#product_version: 1.0
product_type: Web Help

# Specify the base url of the site. This is the path to the root of the site once
# it's been deployed. MUST have a trailing slash. Root should be '/'
baseurl: /devguide-test/

# Used to convert an upsource:///path/to/file.java into a real https link
# Note that commit can also be HEAD
upsource:
  server: upsource.jetbrains.com
  repo: idea-ce
  commit: 1731d054af4ca27aa827c03929e27eeb0e6a8366

# =============================================================================
#
# Everything above here is expected to be overridden in _config.yml
# Everything below should be left alone, but CAN be overridden if necessary
# Note that anything being overridden doesn't get processed for env vars, etc.
#
# =============================================================================

# Used by the TOC generator plugin.
# Input and output files for generating the TOC.
# Defaults are _SUMMARY.md and HelpTOC.json
toc_input: _SUMMARY.md
toc_output: HelpTOC.json

# Make sure we require the plugins. We could just let the jekyll_plugins group
# in Gemfile handle this, but that needs to be specified in the documentation
# site's root, and might get forgotten. Specifying them here fails if we've not
# set bundler up
# gems: [jekyll-git_metadata, jekyll-redirect-from]

# It's a shame we can't change the location of _includes via config
# Also, these assume you've got this subrepo mounted as sdkdocs-template.
# If you don't, override in the _config.yml
plugins_dir: <%= ENV['_sdkdocs_template_dir'] %>/jekyll/plugins
layouts_dir: <%= ENV['_sdkdocs_template_dir'] %>/jekyll/layouts

# Do not copy these files
exclude:
  - Rakefile
  - Gemfile
  - Gemfile.lock
  - sdkdocs-template
  - '*.iml'
  - Gruntfile.js
  - node_modules
  - package.json

# Use the CustomKramdownParser jekyll plugin
markdown: CustomKramdownParser

# Options for the custom kramdown parser
# * Use GFM2, which parses GitHub Flavour Markup, including code fences, but adds support for
#   line highlighting a code fence, e.g. ```csharp{1 23} ... ```
# * Set the TOC levels - display h2-h6 only
# * Use the rouge highlighter for GFM code fences
kramdown:
  input: GFM2
  hard_wrap: false
  auto_ids: false
  toc_levels: 2..6
  syntax_highlighter: rouge
  syntax_highlighter_opts:
    wrap: false

# Configure Jekyll to use rouge for syntax highlighting liquid tags.
# i.e. {% highlight ruby %}...{% endhighlight %} snippets.
# The markdown converter already configures Kramdown to use rouge
# for GFM code blocks. This is for plain liquid tags.
highlighter: rouge

# Copy the following static files
static_files:
  "<%= ENV['_sdkdocs_static_files_dir'] %>/app/app.*": "app/"
  "<%= ENV['_sdkdocs_static_files_dir'] %>/favicon.*": "/"
  "<%= ENV['_sdkdocs_static_files_dir'] %>/*.png": "/"
  "<%= ENV['_sdkdocs_static_files_dir'] %>/*.svg": "/"
  "<%= ENV['_sdkdocs_static_files_dir'] %>/../styles/*": "app/"
  "<%= ENV['_sdkdocs_static_files_dir'] %>/../images/*": "app/"

defaults:
  - values:
      layout: 'webhelp'
